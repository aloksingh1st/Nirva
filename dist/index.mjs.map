{"version":3,"sources":["../src/config.ts","../src/http/index.ts","../src/index.ts"],"sourcesContent":["// src/config.ts\n\nexport interface EntrixConfig {\n  baseUrl: string;\n  tokenStorage?: \"cookie\" | \"localStorage\";\n}\n\nlet config: EntrixConfig | null = null;\n\n/**\n * Configure the Entrix SDK with required options.\n * Ensures baseUrl has no trailing slash.\n */\nexport const configureEntrix = (options: EntrixConfig) => {\n  \n  if (!options.baseUrl) {\n    throw new Error(\"Nirva configuration error: baseUrl is required\");\n  }\n\n  const normalizedUrl = options.baseUrl.replace(/\\/$/, \"\"); // remove trailing slash\n\n  config = {\n    baseUrl: normalizedUrl,\n    tokenStorage: options.tokenStorage ?? \"localStorage\",\n  };\n};\n\n/**\n * Internal helper to assert that config is ready.\n */\nexport const ensureConfigured = () => {\n  if (!config) {\n    throw new Error(\n      \"Nirva SDK not configured. Call configureEntrix(...) first.\"\n    );\n  }\n  return config;\n};\n\n/**\n * Get the Entrix configuration (safe only after configureEntrix).\n */\nexport const getEntrixConfig = (): EntrixConfig => {\n  return ensureConfigured();\n};\n","export async function request(\n  url: string,\n  method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n  body?: object,\n  headers: Record<string, string> = {}\n) {\n  const response = await fetch(url, {\n    method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...headers,\n    },\n    body: body ? JSON.stringify(body) : undefined,\n  });\n\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({}));\n    throw new Error(error.message || `Request failed: ${response.status}`);\n  }\n\n  return response.json();\n}\n","import { configureEntrix as _configureEntrix, getEntrixConfig } from \"./config\";\nimport { request } from \"./http\";\n\ninterface FormData {\n  name: string;\n  email: string;\n  password: string;\n}\n\ninterface LoginFormData {\n  email: string;\n  password: string;\n}\n// Re-export configureEntrix so the user can call it\nexport const configureEntrix = _configureEntrix;\n\n// async function request(url: string, method: string, body?: any) {\n//   const res = await fetch(url, {\n//     method,\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: body ? JSON.stringify(body) : undefined,\n//   });\n\n//   if (!res.ok) {\n//     const errorText = await res.text();\n//     throw new Error(`Request failed: ${res.status} - ${errorText}`);\n//   }\n\n//   return res.json();\n// }\n\nexport const loginGoogle = () => {\n  const { baseUrl } = getEntrixConfig();\n  const url = `${baseUrl}/auth/google`;\n  window.location.href = url;\n};\n\nexport const loginGithub = () => {\n  const { baseUrl } = getEntrixConfig();\n  const url = `${baseUrl}/auth/github`;\n  window.location.href = url;\n};\n\nexport const getMe = async () => {\n  const { baseUrl } = getEntrixConfig();\n  const res = await fetch(`${baseUrl}/auth/me`, {\n    method: \"GET\",\n    credentials: \"include\",\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n\n  if (!res.ok) {\n    throw new Error(`Failed to fetch user: ${res.status} ${res.statusText}`);\n  }\n\n  return res.json();\n};\n\nexport async function loginWithEmail(formData: LoginFormData) {\n  const { email, password } = formData;\n  const { baseUrl } = getEntrixConfig();\n  return request(`${baseUrl}/auth/login`, \"POST\", { email, password });\n}\n\nexport async function registerWithEmail(formData: FormData) {\n  const { baseUrl } = getEntrixConfig();\n  const { name, email, password } = formData;\n  return request(`${baseUrl}/auth/register`, \"POST\", { name, email, password });\n}\n\nexport const logout = async (): Promise<void> => {\n  const { baseUrl } = getEntrixConfig();\n\n  const res = await fetch(`${baseUrl}/auth/logout`, {\n    method: \"POST\",\n    credentials: \"include\",\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n\n  if (!res.ok) {\n    throw new Error(`Logout failed: ${res.status} ${res.statusText}`);\n  }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAI,SAA8B;AAM3B,IAAM,kBAAkB,CAAC,YAA0B;AAb1D;AAeE,MAAI,CAAC,QAAQ,SAAS;AACpB,UAAM,IAAI,MAAM,gDAAgD;AAAA,EAClE;AAEA,QAAM,gBAAgB,QAAQ,QAAQ,QAAQ,OAAO,EAAE;AAEvD,WAAS;AAAA,IACP,SAAS;AAAA,IACT,eAAc,aAAQ,iBAAR,YAAwB;AAAA,EACxC;AACF;AAKO,IAAM,mBAAmB,MAAM;AACpC,MAAI,CAAC,QAAQ;AACX,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAKO,IAAM,kBAAkB,MAAoB;AACjD,SAAO,iBAAiB;AAC1B;;;AC5CA,SAAsB,QACpB,IACA,IACA,IAEA;AAAA,6CAJA,KACA,QACA,MACA,UAAkC,CAAC,GACnC;AACA,UAAM,WAAW,MAAM,MAAM,KAAK;AAAA,MAChC;AAAA,MACA,SAAS;AAAA,QACP,gBAAgB;AAAA,SACb;AAAA,MAEL,MAAM,OAAO,KAAK,UAAU,IAAI,IAAI;AAAA,IACtC,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,QAAQ,MAAM,SAAS,KAAK,EAAE,MAAM,OAAO,CAAC,EAAE;AACpD,YAAM,IAAI,MAAM,MAAM,WAAW,mBAAmB,SAAS,MAAM,EAAE;AAAA,IACvE;AAEA,WAAO,SAAS,KAAK;AAAA,EACvB;AAAA;;;ACPO,IAAMA,mBAAkB;AAmBxB,IAAM,cAAc,MAAM;AAC/B,QAAM,EAAE,QAAQ,IAAI,gBAAgB;AACpC,QAAM,MAAM,GAAG,OAAO;AACtB,SAAO,SAAS,OAAO;AACzB;AAEO,IAAM,cAAc,MAAM;AAC/B,QAAM,EAAE,QAAQ,IAAI,gBAAgB;AACpC,QAAM,MAAM,GAAG,OAAO;AACtB,SAAO,SAAS,OAAO;AACzB;AAEO,IAAM,QAAQ,MAAY;AAC/B,QAAM,EAAE,QAAQ,IAAI,gBAAgB;AACpC,QAAM,MAAM,MAAM,MAAM,GAAG,OAAO,YAAY;AAAA,IAC5C,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,EAChD,CAAC;AAED,MAAI,CAAC,IAAI,IAAI;AACX,UAAM,IAAI,MAAM,yBAAyB,IAAI,MAAM,IAAI,IAAI,UAAU,EAAE;AAAA,EACzE;AAEA,SAAO,IAAI,KAAK;AAClB;AAEA,SAAsB,eAAe,UAAyB;AAAA;AAC5D,UAAM,EAAE,OAAO,SAAS,IAAI;AAC5B,UAAM,EAAE,QAAQ,IAAI,gBAAgB;AACpC,WAAO,QAAQ,GAAG,OAAO,eAAe,QAAQ,EAAE,OAAO,SAAS,CAAC;AAAA,EACrE;AAAA;AAEA,SAAsB,kBAAkB,UAAoB;AAAA;AAC1D,UAAM,EAAE,QAAQ,IAAI,gBAAgB;AACpC,UAAM,EAAE,MAAM,OAAO,SAAS,IAAI;AAClC,WAAO,QAAQ,GAAG,OAAO,kBAAkB,QAAQ,EAAE,MAAM,OAAO,SAAS,CAAC;AAAA,EAC9E;AAAA;AAEO,IAAM,SAAS,MAA2B;AAC/C,QAAM,EAAE,QAAQ,IAAI,gBAAgB;AAEpC,QAAM,MAAM,MAAM,MAAM,GAAG,OAAO,gBAAgB;AAAA,IAChD,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,EAChD,CAAC;AAED,MAAI,CAAC,IAAI,IAAI;AACX,UAAM,IAAI,MAAM,kBAAkB,IAAI,MAAM,IAAI,IAAI,UAAU,EAAE;AAAA,EAClE;AACF;","names":["configureEntrix"]}