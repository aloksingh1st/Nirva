{"version":3,"sources":["../src/config.ts","../src/index.ts"],"sourcesContent":["// src/config.ts\n\nexport interface EntrixConfig {\n  baseUrl: string;\n  tokenStorage?: \"cookie\" | \"localStorage\";\n}\n\nlet config: EntrixConfig | null = null;\n\n/**\n * Configure the Entrix SDK with required options.\n * Ensures baseUrl has no trailing slash.\n */\nexport const configureEntrix = (options: EntrixConfig) => {\n  \n  if (!options.baseUrl) {\n    throw new Error(\"Entrix configuration error: baseUrl is required\");\n  }\n\n  const normalizedUrl = options.baseUrl.replace(/\\/$/, \"\"); // remove trailing slash\n\n  config = {\n    baseUrl: normalizedUrl,\n    tokenStorage: options.tokenStorage ?? \"localStorage\",\n  };\n};\n\n/**\n * Internal helper to assert that config is ready.\n */\nexport const ensureConfigured = () => {\n  if (!config) {\n    throw new Error(\n      \"Entrix SDK not configured. Call configureEntrix(...) first.\"\n    );\n  }\n  return config;\n};\n\n/**\n * Get the Entrix configuration (safe only after configureEntrix).\n */\nexport const getEntrixConfig = (): EntrixConfig => {\n  return ensureConfigured();\n};\n","import { configureEntrix as _configureEntrix, getEntrixConfig } from \"./config\";\n\n// Re-export configureEntrix so the user can call it\nexport const configureEntrix = _configureEntrix;\n\nexport const loginGoogle = () => {\n  const { baseUrl } = getEntrixConfig();\n  const url = `${baseUrl}/auth/google`;\n  window.location.href = url;\n};\n\n\nexport const loginGithub = () => {\n  const { baseUrl } = getEntrixConfig();\n  const url = `${baseUrl}/auth/github`;\n  window.location.href = url;\n};\n\n\nexport const getMe = async () => {\n  const { baseUrl } = getEntrixConfig();\n  const res = await fetch(`${baseUrl}/auth/me`, {\n    method: \"GET\",\n    credentials: \"include\",\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n\n  if (!res.ok) {\n    throw new Error(`Failed to fetch user: ${res.status} ${res.statusText}`);\n  }\n\n  return res.json();\n};\n\nexport const logout = async (): Promise<void> => {\n  const { baseUrl } = getEntrixConfig();\n\n  const res = await fetch(`${baseUrl}/auth/logout`, {\n    method: \"POST\",\n    credentials: \"include\",\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n\n  if (!res.ok) {\n    throw new Error(`Logout failed: ${res.status} ${res.statusText}`);\n  }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAOA,IAAI,SAA8B;AAM3B,IAAM,kBAAkB,CAAC,YAA0B;AAb1D;AAeE,MAAI,CAAC,QAAQ,SAAS;AACpB,UAAM,IAAI,MAAM,iDAAiD;AAAA,EACnE;AAEA,QAAM,gBAAgB,QAAQ,QAAQ,QAAQ,OAAO,EAAE;AAEvD,WAAS;AAAA,IACP,SAAS;AAAA,IACT,eAAc,aAAQ,iBAAR,YAAwB;AAAA,EACxC;AACF;AAKO,IAAM,mBAAmB,MAAM;AACpC,MAAI,CAAC,QAAQ;AACX,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAKO,IAAM,kBAAkB,MAAoB;AACjD,SAAO,iBAAiB;AAC1B;;;ACzCO,IAAMA,mBAAkB;AAExB,IAAM,cAAc,MAAM;AAC/B,QAAM,EAAE,QAAQ,IAAI,gBAAgB;AACpC,QAAM,MAAM,GAAG,OAAO;AACtB,SAAO,SAAS,OAAO;AACzB;AAGO,IAAM,cAAc,MAAM;AAC/B,QAAM,EAAE,QAAQ,IAAI,gBAAgB;AACpC,QAAM,MAAM,GAAG,OAAO;AACtB,SAAO,SAAS,OAAO;AACzB;AAGO,IAAM,QAAQ,MAAY;AAC/B,QAAM,EAAE,QAAQ,IAAI,gBAAgB;AACpC,QAAM,MAAM,MAAM,MAAM,GAAG,OAAO,YAAY;AAAA,IAC5C,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,EAChD,CAAC;AAED,MAAI,CAAC,IAAI,IAAI;AACX,UAAM,IAAI,MAAM,yBAAyB,IAAI,MAAM,IAAI,IAAI,UAAU,EAAE;AAAA,EACzE;AAEA,SAAO,IAAI,KAAK;AAClB;AAEO,IAAM,SAAS,MAA2B;AAC/C,QAAM,EAAE,QAAQ,IAAI,gBAAgB;AAEpC,QAAM,MAAM,MAAM,MAAM,GAAG,OAAO,gBAAgB;AAAA,IAChD,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,EAChD,CAAC;AAED,MAAI,CAAC,IAAI,IAAI;AACX,UAAM,IAAI,MAAM,kBAAkB,IAAI,MAAM,IAAI,IAAI,UAAU,EAAE;AAAA,EAClE;AACF;","names":["configureEntrix"]}